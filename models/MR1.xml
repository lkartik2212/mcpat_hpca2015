<?xml version="1.0" ?>
<!-- MR1 model. Author: Sam Xi -->
<component id="root" name="root">
<component id="system" name="system">
<!--McPAT will skip the components if number is set to 0 -->
<param name="number_of_cores" value="8"/>
<param name="number_of_L1Directories" value="1"/>
<param name="number_of_L2Directories" value="1"/>
<param name="number_of_L2s" value="1"/>
<param name="Private_L2" value="1"/><!--1 Private, 0 shared/coherent -->
<!-- Using 8 separate L3 caches seems to be a more accurate model than one
large monolithic cache -->
<param name="number_of_L3s" value="1"/>
<param name="number_of_NoCs" value="8"/>
<param name="homogeneous_cores" value="1"/><!--1 means homogeneous -->
<param name="homogeneous_L2s" value="1"/>
<param name="homogeneous_L1Directories" value="1"/>
<param name="homogeneous_L2Directories" value="1"/>
<param name="homogeneous_L3s" value="1"/>
<!-- cc= cache coherence hardware -->
<param name="homogeneous_ccs" value="1"/>
<param name="homogeneous_NoCs" value="1"/>
<param name="core_tech_node" value="45"/><!-- nm -->
<param name="target_core_clockrate" value="4000"/><!--MHz -->
<param name="temperature" value="380"/> <!-- Kelvin -->
<param name="number_cache_levels" value="3"/>
<!--0: aggressive wire technology; 1: conservative wire technology -->
<param name="interconnect_projection_type" value="0"/>
<!-- 0: HP(High Performance Type);
1: LSTP(Low standby power)
2: LOP (Low Operating Power)  -->
<param name="device_type" value="0"/>
<!-- 0 no use; 1 use when aggressive -->
<param name="longer_channel_device" value="1"/>
<!-- 0 not enabled; 1 enabled -->
<param name="power_gating" value="1"/>
<param name="machine_bits" value="64"/>
<!-- address width determines the tag_width in Cache, LSQ and buffers in the
cache controller. default value is machine_bits, if not set -->
<param name="virtual_address_width" value="64"/>
<param name="physical_address_width" value="46"/>
<!--
This page size(B) is completely different from the page size in Main
memo section. this page size is the size of virtual memory from OS/Arch
perspective; the page size in Main memo section is the actual physical
line in a DRAM bank
-->
<param name="virtual_memory_page_size" value="4096"/>
<stat name="total_cycles" value="0"/>
<stat name="busy_cycles" value="0"/>
<stat name="idle_cycles" value="0"/>
<!-- *********************** cores ******************* -->
<component id="system.core0" name="core0">
<!-- Core property -->
<param name="clock_rate" value="4000"/>
<param name="vdd" value="1.01"/><!-- 0 means using ITRS default vdd -->
<!-- for cores with unknown timing, set to 0 to force off the opt flag -->
<param name="opt_local" value="0"/>
<param name="instruction_length" value="32"/>
<param name="opcode_width" value="6"/>
<param name="x86" value="0"/>
<param name="micro_opcode_width" value="0"/>
<!-- inorder/OoO; 1 inorder; 0 OOO-->
<param name="machine_type" value="0"/>
<param name="number_hardware_threads" value="4"/>

<!-- ******************************* -->
<!-- INSTRUCTION FETCH / DECODE UNIT -->
<!-- ******************************* -->

<!-- fetch_width determines the size of cachelines of L1 cache block -->
<param name="fetch_width" value="8"/>
<!-- number_instruction_fetch_ports(icache ports) is always 1 in
single-thread processor, it only may be more than one in SMT processors.
BTB ports always equals to fetch ports since
branch information in consecutive branch instructions in the same fetch
group can be read out from BTB once.-->
<param name="number_instruction_fetch_ports" value="1"/>
<!-- decode_width determines the number of ports of the
renaming table (both RAM and CAM) scheme -->
<param name="decode_width" value="6"/>
<!-- issue_width determines the number of ports of Issue window and other
logic as in the complexity effective processors paper;
issue_width==dispatch_width -->
<param name="issue_width" value="4"/>
<param name="peak_issue_width" value="6"/>
<!-- commit_width determines the number of ports of register files -->
<param name="commit_width" value="4"/>
<param name="fp_issue_width" value="4"/>
<!-- number of branch instructions can be predicted simultaneously-->
<!-- This is actually the ports on the BPTs. The CPU can predict up to 8
branches per cycle, but this depends on the icache access alignment. In any
case, it only needs 1 read port. -->
<param name="prediction_width" value="1"/>
<!-- Current version of McPAT does not distinguish int and floating point
pipelines. Theses parameters are reserved for future use.-->
<!--integer_pipeline and floating_pipelines, if the floating_pipelines is
0, then the pipeline is shared-->
<param name="pipelines_per_core" value="2,4"/>
<!-- pipeline depth of int and fp, if pipeline is shared, the second
number is the average cycles of fp ops -->
<param name="pipeline_depth" value="4,7"/>
<!-- issue and exe unit-->
<param name="ALU_per_core" value="2"/>
<!-- contains an adder, a shifter, and a logical unit -->
<param name="MUL_per_core" value="4"/>
<!-- For MUL and Div -->
<param name="FPU_per_core" value="4"/>
<!-- buffer between IF and ID stage -->
<param name="instruction_buffer_size" value="20"/><!-- what units? -->
<!-- buffer between ID and sche/exe stage -->
<param name="decoded_stream_buffer_size" value="6"/>
<!-- Out of order execution model.
0: Physical register based. 1: Reservation station based. -->
<param name="instruction_window_scheme" value="0"/>
<!-- the size of the instruction issue queue as in Alpha 21264, or the
size of the RS as in Intel P6 -->
<param name="instruction_window_size" value="68"/>
<param name="fp_instruction_window_size" value="68"/>
<!-- each in-flight instruction has an entry in ROB -->
<!-- 20 entries of up to 6 operations each. -->
<param name="ROB_size" value="120"/>

<!-- ********* -->
<!-- registers -->
<!-- ********* -->

<!--  if OoO processor, phy_reg number is needed for renaming logic,
renaming logic is for both integer and floating point insts.  -->
<param name="archi_Regs_IRF_size" value="32"/>
<param name="archi_Regs_FRF_size" value="64"/><!-- MMX + XMM -->
<!-- These get duplicated per thread. Without changing source code, the best we
can do is only specify a fourth of the total number of physical registers. -->
<param name="phy_Regs_IRF_size" value="28"/>
<param name="phy_Regs_FRF_size" value="43"/>
<!-- rename logic can be RAM based(0) or CAM based(1).
RAM-based scheme will have free list, status table;
CAM-based scheme have the valid bit in the data field of the CAM
both RAM and CAM need RAM-based checkpoint table,
checkpoint_depth=# of in_flight instructions;
Detailed RAT Implementation see TR -->
<param name="rename_scheme" value="1"/>
<!-- how many windows in the windowed register file, sun processors;
no register windowing is used when this number is 0 -->
<param name="register_windows_size" value="0"/>
<!-- In OoO cores, loads and stores can be issued whether inorder
(Pentium Pro) or (OoO)out-of-order(Alpha), They will always try to execute
out-of-order though. -->
<param name="LSU_order" value="outorder"/>
<param name="store_buffer_size" value="8"/>
<!-- By default, in-order cores do not have load buffers -->
<param name="load_buffer_size" value="8"/>
<!-- number of ports refer to sustain-able concurrent memory accesses
max_allowed_in_flight_memo_instructions determines the # of ports of
load and store buffer as well as the ports of Dcache which is connected
to LSU.
dual-pumped Dcache can be used to save the extra read/write ports -->
<param name="memory_ports" value="3"/>
<!-- Return address stack size -->
<param name="RAS_size" value="16"/>

<!-- *************************** -->
<!-- CORE PERFORMANCE STATISTICS -->
<!-- *************************** -->

<!-- general stats, defines simulation periods;require total, idle, and
busy cycles for sanity check  -->
<!-- please note: if target architecture is X86, then all the instructions
refer to (fused) micro-ops -->
<stat name="float_window_wakeup_accesses" value="0"/>
<stat name="int_instructions" value="0"/>
<stat name="inst_window_wakeup_accesses" value="0"/>
<stat name="branch_mispredictions" value="0"/>
<stat name="committed_fp_instructions" value="0"/>
<stat name="int_regfile_reads" value="0"/>
<stat name="float_regfile_reads" value="0"/>
<stat name="load_instructions" value="0"/>
<stat name="total_iops_to_uniq" value="0"/>
<stat name="committed_int_insts" value="0"/>
<stat name="float_regfile_writes" value="0"/>
<stat name="branch_instructions" value="0"/>
<stat name="committed_instructions" value="0"/>
<stat name="store_instructions" value="0"/>
<stat name="total_instructions" value="0"/>
<stat name="fp_instructions" value="0"/>
<stat name="int_regfile_writes" value="0"/>
<!-- <=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
<stat name="pipeline_duty_cycle" value="1"/>
<!-- the following cycle stats are used for heterogeneous cores only,
please ignore them if homogeneous cores -->
<stat name="total_cycles" value="100000"/>
<stat name="idle_cycles" value="0"/>
<stat name="busy_cycles"  value="100000"/>

<!-- instruction buffer stats -->

<!-- ROB stats, both RS and Phy based OoOs have ROB
performance simulator should capture the difference on accesses,
otherwise, McPAT has to guess based on number of committed instructions.
-->
<!-- Unsure about ROB reads and writes. Currently assuming it is the same
as total UNIQ IOPs dispatched. -->
<stat name="rename_reads" value="0"/>
<stat name="fp_rename_writes" value="0"/>
<stat name="cdb_mul_accesses" value="0"/>
<stat name="inst_window_writes" value="0"/>
<stat name="cdb_alu_accesses" value="0"/>
<stat name="ROB_reads" value="0"/>
<stat name="mul_accesses" value="0"/>
<stat name="context_switches" value="0"/>
<stat name="function_calls" value="0"/>
<stat name="cdb_fpu_accesses" value="0"/>
<stat name="ROB_writes" value="0"/>
<stat name="instruction_buffer_reads" value="0"/>
<stat name="rename_writes" value="0"/>
<stat name="fp_inst_window_reads" value="0"/>
<stat name="fp_inst_window_writes" value="0"/>
<stat name="inst_window_reads" value="0"/>
<stat name="fpu_accesses" value="0"/>
<stat name="ialu_accesses" value="0"/>
<stat name="fp_rename_reads" value="0"/>
<!-- multiple cycle accesses should be counted multiple times,
otherwise, McPAT can use internal counter for different floating point
instructions to get final accesses. But that needs detailed info for
floating point inst mix -->
<!--  currently the performance simulator should
make sure all the numbers are final numbers,
including the explicit read/write accesses,
and the implicit accesses such as replacements and etc.
Future versions of McPAT may be able to reason the implicit access
based on param and stats of last level cache
The same rule applies to all cache access stats too!  -->

<!-- following is AF for max power computation.
Do not change them, unless you understand them-->
<!--depends on Icache line size and instruction issue rate -->
<stat name="IFU_duty_cycle" value="0.25"/>
<stat name="LSU_duty_cycle" value="0.25"/>
<stat name="MemManU_I_duty_cycle" value="0.25"/>
<stat name="MemManU_D_duty_cycle" value="0.25"/>
<stat name="ALU_duty_cycle" value="1"/>
<stat name="MUL_duty_cycle" value="0.3"/>
<stat name="FPU_duty_cycle" value="0.3"/>
<stat name="ALU_cdb_duty_cycle" value="1"/>
<stat name="MUL_cdb_duty_cycle" value="0.3"/>
<stat name="FPU_cdb_duty_cycle" value="0.3"/>

<!-- **************** -->
<!-- BRANCH PREDICTOR -->
<!-- **************** -->
<param name="number_of_BPT" value="1"/>
<component id="system.core0.predictor" name="PBT">
<!-- branch predictor; tournament predictor see Alpha implementation -->
<param name="local_predictor_size" value="1,66"/>
<param name="local_predictor_entries" value="128"/>
<param name="global_predictor_entries" value="256"/>
<param name="global_predictor_bits" value="66"/>
<param name="chooser_predictor_entries" value="128"/>
<param name="chooser_predictor_bits" value="66"/>
<!-- These parameters can be combined like below in next version
<param name="load_predictor" value="10,3,1024"/>
<param name="global_predictor" value="4096,2"/>
<param name="predictor_chooser" value="4096,2"/>
-->
</component>
<!-- there are no write requests to itlb although writes will go to itlb
after a miss, which is actually a replacement -->
<component id="system.core0.itlb" name="itlb">
<!-- 64-entry ERAT -->
<param name="number_entries" value="64"/>
<stat name="conflicts" value="0"/>
<stat name="total_accesses" value="0"/>
<stat name="total_misses" value="0"/>
</component>
<component id="system.core0.icache" name="icache">
<!--
The parameters are:
capacity, block_width, associativity, bank, throughput, latency,
output_width, cache policy,
throughput is the number of times the cache is accessed per core clock
cycle. Latency is measured in the number of core clock cycles. All
widths are in bytes.
Cache policy is either write-through/no-write-allocate (0) or
write-back with write-allocate (1).
-->
<param name="icache_config" value="32768,32,4,8,1,3,32,0"/>
<!-- 8 banks instead of 16 (as stated in paper) -->
<!-- cache controller buffer sizes:
miss_buffer_size(MSHR), fill_buffer_size, prefetch_buffer_size,
writeback_buffer_size
-->
<!-- supports 4 outstanding instruction fetch requests (miss and fill
buffers) and 2 prefetches per cycle. writeback does not apply for
icaches -->
<param name="buffer_sizes" value="4,4,2,0"/>
<stat name="read_accesses" value="0"/>
<stat name="read_misses" value="0"/>
<stat name="conflicts" value="0"/>
</component>
<component id="system.core0.dtlb" name="dtlb">
<!-- Main TLB is 512 entries for effective address->virtual segment->
real page frame addresses. There is also a DERAT of 64 entries for
effective to real addresses. SLB is 32 entries. For a closer
approximation, all of these buffers will be combined into a single
TLB here. -->
<param name="number_entries" value="704"/>
<stat name="conflicts" value="0"/>
<stat name="total_accesses" value="0"/>
<stat name="total_misses" value="0"/>
</component>

<!-- all the buffer related parameters are optional -->
<component id="system.core0.dcache" name="dcache">
<!-- 32 bytes per block, as cache lines are broken into 4 sectors. -->
<param name="dcache_config" value="32768,32,8,4, 1,3, 32,0 "/>
<!-- No fill buffer; in place, we use the store queue in the LSU. -->
<!-- no writeback buffer due to write-through design -->
<!-- miss buffer = load miss queue of 8 entries. -->
<param name="buffer_sizes" value="8,0,8,0"/>
<stat name="read_accesses" value="0"/>
<stat name="write_accesses" value="0"/>
<stat name="conflicts" value="0"/>
<stat name="read_misses" value="0"/>
<stat name="write_misses" value="0"/>
</component>

<!-- BTB = branch target buffer -->
<param name="number_of_BTB" value="1"/>
<component id="system.core0.BTB" name="BTB">
<!-- all the buffer related are optional -->
<!-- 128 entry BTAC, 8 bytes per block -> 1024B buffer. -->
<!-- 2 way set associative, unbanked -->
<!-- Note: BTAC is only used in single-thread mode. SMT modes use a
count and link register for branch target prediction, which can't be
modeled with this generic BTB construction, but the total size of the
count and link registers is approximately equal to the BTAC itself. -->
<param name="BTB_config" value="1024,8,2,1,1,1"/>
<!--See IFU code for guideline -->
<stat name="read_accesses" value="0"/>
<stat name="write_accesses" value="0"/>
</component>
</component>
<component id="system.L1Directory0" name="L1Directory0">
<!--
Types: 0 specifies a cam based shadowed tag.
1 is a directory cache.
-->
<param name="Directory_type" value="1"/>
<!-- For a 32KB cache with 128B cache lines, we have 256entries. Each
entry has to hold the coherency state. There are 13 states, so 4
bits -> 1024KB directory. -->
<param name="Dir_config" value="1024,1,1,1,1,4,1"/>
<param name="buffer_sizes" value="1,1,1,1"/>
<param name="clockrate" value="4000"/>
<param name="vdd" value="1.01"/><!-- 0 means using ITRS default vdd -->
<!-- number of r, w, and rw search ports -->
<param name="ports" value="3,1,0"/>
<param name="device_type" value="0"/>
<!-- although there are multiple access types,
Performance simulator needs to cast them into reads or writes
e.g. the invalidates can be considered as writes -->
<!-- accesses include misses. -->
<stat name="l1_dir_read_misses" value="0"/>
<stat name="l1_dir_write_misses" value="0"/>
<stat name="l1_dir_read_hits" value="0"/>
<stat name="l1_dir_write_hits" value="0"/>
</component>
<component id="system.L2Directory0" name="L2Directory0">
<param name="Directory_type" value="1"/>
<!-- best case latency is 8 cycles i think -->
<!-- Capacity: 256KB cache with 128B lines -> 2048 entries. Coherency
protocol is 13 states -> 4b per entry -> capacity is 8K  -->
<param name="Dir_config" value="8192,4,1,1,1,8"/>
<param name="buffer_sizes" value="0,0,0,0"/>
<param name="clockrate" value="2000"/>
<param name="vdd" value="1.01"/><!-- 0 means using ITRS default vdd -->
<!-- number of r, w, and rw search ports -->
<param name="ports" value="1,1,1"/>
<param name="device_type" value="0"/>
<!-- altough there are multiple access types,
Performance simulator needs to cast them into reads or writes
e.g. the invalidates can be considered as writes -->
<stat name="l2_dir_reads" value="0"/>
<stat name="l2_dir_writes" value="0"/>
</component>
<component id="system.L20" name="L20">
<!-- all the buffer related are optional -->
<!-- 2ns latency. At 4GHz, this is 8 cycles. -->
<param name="L2_config" value="262144, 128, 8, 2, 2, 9, 32, 1"/>
<param name="buffer_sizes" value="8, 16, 8, 8"/>
<param name="clockrate" value="2000"/>
<param name="vdd" value="1.11"/><!-- 0 means using ITRS default vdd -->
<param name="ports" value="1,1,1"/>
<!-- number of r, w, and rw ports -->
<param name="device_type" value="0"/>
<stat name="l2_write_misses" value="0"/>
<stat name="l2_write_hits" value="0"/>
<stat name="l2_read_hits" value="0"/>
<stat name="l2_read_misses" value="0"/>
<stat name="duty_cycle" value="0.5"/>
</component>
<!--**********************************************************************-->
<component id="system.L30" name="L30">
<!-- Local L3 latency is around 24 cycles. -->
<param name="L3_config" value="33554432, 32, 8, 4, 1.5, 24, 32, 1"/>
<param name="clockrate" value="2000"/>
<!-- number of r, w, and rw ports -->
<param name="ports" value="4,4,4"/>
<param name="device_type" value="0"/>
<param name="vdd" value="1.11"/><!-- 0 means using ITRS default vdd -->
<param name="buffer_sizes" value="0, 128, 128, 128"/>
<stat name="l3_write_misses" value="0"/>
<stat name="l3_read_hits" value="0"/>
<stat name="l3_read_misses" value="0"/>
<stat name="l3_write_hits" value="0"/>
<stat name="duty_cycle" value="1"/>
</component>
<!--**********************************************************************-->
<component id="system.NoC0" name="noc0">
<param name="clockrate" value="2000"/>
<param name="vdd" value="1.01"/><!-- 0 means using ITRS default vdd -->
<param name="type" value="0"/>
<!--0:bus, 1:NoC , for bus no matter how many nodes sharing the bus
at each time only one node can send req -->
<param name="horizontal_nodes" value="4"/>
<param name="vertical_nodes" value="2"/>
<param name="has_global_link" value="1"/>
<!-- 1 has global link, 0 does not have global link -->
<param name="link_throughput" value="1"/><!--w.r.t clock -->
<!--w.r.t core clock. Completely guessing here. -->
<param name="link_latency" value="10"/>
<!-- throughput >= latency -->
<!-- Router architecture -->
<param name="input_ports" value="1"/>
<param name="output_ports" value="1"/>
<!-- For bus the I/O ports should be 1 -->
<param name="flit_bits" value="16"/><!-- 16 byte data packets -->
<param name="chip_coverage" value="0.125"/>
<!-- When multiple NOC present, one NOC will cover part of the whole chip.
chip_coverage <=1 -->
<param name="link_routing_over_percentage" value="0.5"/>
<!-- Links can route over other components or occupy whole area.
by default, 50% of the NoC global links routes over other
components -->
<stat name="total_accesses" value="100000"/>
<!-- This is the number of total accesses within the whole network not for
each router -->
<stat name="duty_cycle" value="1"/>
</component>
<!--**********************************************************************-->
<component id="system.mc" name="mc">
<!-- Memory controllers are for DDR(2,3...) DIMMs -->
<!-- currently McPAT only supports homogeneous memory controllers -->
<!-- current version of McPAT uses published values for base parameters of
memory controller. Improvements on MC will be added in later versions. -->
<param name="type" value="0"/> <!-- 1: low power; 0 high performance -->
<param name="mc_clock" value="800"/><!--DIMM IO bus clock rate MHz-->
<param name="vdd" value="1.01"/><!-- 0 means using ITRS default vdd -->
<param name="peak_transfer_rate" value="180000"/><!--MB/S-->
<param name="block_size" value="128"/><!--B-->
<param name="number_mcs" value="2"/>
<param name="memory_channels_per_mc" value="4"/>
<!-- # of ranks of each channel-->
<param name="number_ranks" value="2"/>
<param name="withPHY" value="1"/>
<param name="req_window_size_per_channel" value="64"/>
<param name="IO_buffer_size_per_channel" value="16"/>
<param name="databus_width" value="72"/>
<!-- McPAT will add the control bus width to the address bus width
automatically -->
<param name="addressbus_width" value="30"/>
<!-- McPAT does not track individual mc, instead, it takes the total
accesses and calculate the average power per MC or per channel. This is
sufficient for most application.  Further track down can be easily added
in later versions. -->
<stat name="memory_accesses" value="0"/>
<stat name="memory_reads" value="0"/>
<stat name="memory_writes" value="0"/>
</component>
<!--**********************************************************************-->
<component id="system.niu" name="niu">
<!-- On chip 10Gb Ethernet NIC, including XAUI Phy and MAC controller  -->
<!-- For a minimum IP packet size of 84B at 10Gb/s, a new packet arrives
every 67.2ns. the low bound of clock rate of a 10Gb MAC is 150Mhz -->
<param name="type" value="0"/> <!-- 1: low power; 0 high performance -->
<param name="clockrate" value="350"/>
<param name="vdd" value="1.01"/><!-- 0 means using ITRS default vdd -->
<!-- unlike PCIe and memory controllers, each Ethernet controller only has
one port -->
<param name="number_units" value="0"/>
<!-- McPAT does not track individual nic, instead, it takes the total
accesses and calculate the average power per nic or per channel. This is
sufficient for most application. -->
<stat name="duty_cycle" value="1.0"/> <!-- achievable max load <= 1.0 -->
<!-- ratio of total achieved load to total achieve-able bandwidth  -->
<stat name="total_load_perc" value="0.7"/>
</component>
<!--**********************************************************************-->
<component id="system.pcie" name="pcie">
<!-- On chip PCIe controller, including Phy-->
<!-- For a minimum PCIe packet size of 84B at 8Gb/s per lane (PCIe 3.0), a
new packet arrives every 84ns. the low bound of clock rate of a PCIe per
lane logic is 120Mhz -->
<param name="type" value="0"/> <!-- 1: low power; 0 high performance -->
<param name="withPHY" value="1"/>
<param name="clockrate" value="350"/>
<param name="vdd" value="1.01"/><!-- 0 means using ITRS default vdd -->
<param name="number_units" value="0"/>
<param name="num_channels" value="8"/> <!-- 2 ,4 ,8 ,16 ,32 -->
<!-- McPAT does not track individual pcie controllers, instead, it takes
the total accesses and calculate the average power per pcie controller or
per channel. This is sufficient for most application. -->
<stat name="duty_cycle" value="1.0"/> <!-- achievable max load <= 1.0 -->
<!-- Percentage of total achieved load to total achieveable bandwidth  -->
<stat name="total_load_perc" value="0.7"/>
</component>
<!--**********************************************************************-->
<component id="system.flashc" name="flashc">
<param name="number_flashcs" value="0"/>
<param name="type" value="1"/> <!-- 1: low power; 0 high performance -->
<param name="withPHY" value="1"/>
<!--Per controller sustain-able peak rate MB/S -->
<param name="peak_transfer_rate" value="200"/>
<param name="vdd" value="1.01"/><!-- 0 means using ITRS default vdd -->
<stat name="duty_cycle" value="1.0"/> <!-- achievable max load <= 1.0 -->
<stat name="total_load_perc" value="0.7"/>
<!-- McPAT does not track individual flash controller, instead, it takes
the total accesses and calculate the average power per fc or per channel.
This is sufficient for most application -->
</component>
<!--**********************************************************************-->

</component>
</component>
